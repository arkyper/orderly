package com.ecommerce.service;

import com.ecommerce.dto.OrderItemRequest;
import com.ecommerce.dto.OrderRequest;
import com.ecommerce.dto.OrderResponse;
import com.ecommerce.exception.OrderNotFoundException;
import com.ecommerce.exception.PaymentFailedException;
import com.ecommerce.model.Order;
import com.ecommerce.model.OrderItem;
import com.ecommerce.model.Product;
import com.ecommerce.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

// Service for managing order operations and business logic.

@Service
@Transactional
public class OrderService {

    private final OrderRepository orderRepository;
    private final InventoryService inventoryService;
    private final PaymentService paymentService;

    @Autowired
    public OrderService(OrderRepository orderRepository,
                        InventoryService inventoryService,
                        PaymentService paymentService) {
        this.orderRepository = orderRepository;
        this.inventoryService = inventoryService;
        this.paymentService = paymentService;
    }

    
    // Create a new order following the complete workflow:
    // 1. Validate products exist
    // 2. Check and lock stock
    // 3. Process payment
    // 4. Save order
    // 5. Deduct stock

    // @param orderRequest the order request
    // @return order response
    
    public OrderResponse createOrder(OrderRequest orderRequest) {
        // Step 1: Validate all products exist and lock stock
        List<Product> products = new ArrayList<>();
        List<OrderItemRequest> itemRequests = orderRequest.getItems();

        try {
            // Validate and lock stock for all items
            for (OrderItemRequest itemRequest : itemRequests) {
                Product product = inventoryService.getProduct(itemRequest.getProductId());
                products.add(product);
                inventoryService.lockStock(itemRequest.getProductId(), itemRequest.getQuantity());
            }

            // Step 2: Create order with items
            Order order = new Order(orderRequest.getCustomerName(), orderRequest.getCustomerEmail());
            BigDecimal totalAmount = BigDecimal.ZERO;

            for (int i = 0; i < itemRequests.size(); i++) {
                OrderItemRequest itemRequest = itemRequests.get(i);
                Product product = products.get(i);

                OrderItem orderItem = new OrderItem(
                        null, // ID will be generated by the database
                        order, // Set the order
                        product.getId(),
                        product.getName(),
                        itemRequest.getQuantity(),
                        product.getPrice(),
                        product.getPrice().multiply(BigDecimal.valueOf(itemRequest.getQuantity())) // Calculate subtotal
                );

                order.addItem(orderItem);
                totalAmount = totalAmount.add(orderItem.getSubtotal());
            }

            order.setTotalAmount(totalAmount);

            // Step 3: Process payment
            try {
                paymentService.processPayment(totalAmount, order.getCustomerEmail());
            } catch (PaymentFailedException e) {
                // Release locked stock on payment failure
                for (OrderItemRequest itemRequest : itemRequests) {
                    inventoryService.releaseLock(itemRequest.getProductId(), itemRequest.getQuantity());
                }
                throw e;
            }

            // Step 4: Save order
            order.setStatus(Order.OrderStatus.COMPLETED);
            Order savedOrder = orderRepository.save(order);

            // Step 5: Deduct actual stock
            for (OrderItemRequest itemRequest : itemRequests) {
                inventoryService.deductStock(itemRequest.getProductId(), itemRequest.getQuantity());
            }

            return new OrderResponse(savedOrder);

        } catch (Exception e) {
            // Release any locked stock in case of failure
            for (OrderItemRequest itemRequest : itemRequests) {
                try {
                    inventoryService.releaseLock(itemRequest.getProductId(), itemRequest.getQuantity());
                } catch (Exception releaseException) {
                    // Log but don't throw - we want to propagate the original exception
                    System.err.println("Error releasing lock for product " + itemRequest.getProductId() + ": " + releaseException.getMessage());
                }
            }
            throw e;
        }
    }

    
    // Get order by ID.
    
    // @param orderId the order ID
    // @return order response
    // @throws OrderNotFoundException if order doesn't exist
    
    @Transactional(readOnly = true)
    public OrderResponse getOrder(Long orderId) {
        Order order = orderRepository.findById(orderId).orElseThrow(() -> new OrderNotFoundException(orderId));
        return new OrderResponse(order);
    }
}
